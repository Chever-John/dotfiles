
# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }

[[keyboard.bindings]]
key = "R"
mods = "Command"
mode = "~Vi|~Search"
chars = "\f"

[[keyboard.bindings]]
key = "R"
mods = "Command"
mode = "~Vi|~Search"
action = "ClearHistory"

# use command + shift + w to close the window
[[keyboard.bindings]]
key = "W"
mods = "Command"
action = "Hide"

[[keyboard.bindings]]
key = "W"
mods = "Command|Shift"
action = "Quit"

# unused Error
[[keyboard.bindings]]
key = "N"
mods = "Command"
action = "SpawnNewInstance"

# unused Error
# 因为添加了 shell 配置，配置如下：
# [shell]
# program = "/bin/zsh"
# args = [ "--login", "-c", "tmux new-session -A -D -s CheverJohn_Always_Love_U" ]
# 所以这个配置总是会创建一个 Attached 的 session，所以这个配置就会出现问题。 
# 
# [[keyboard.bindings]]
# key = "T"
# mods = "Command"
# action = "CreateNewWindow"

# use alt(option in mac) + left/right to move to the beginning/end of the near word
[[keyboard.bindings]]
key = "Left"
mods = "Alt"
chars = "\u001bb"

[[keyboard.bindings]]
key = "Right"
mods = "Alt"
chars = "\u001bf"

# use command + left/right to move to the beginning/end of the line
[[keyboard.bindings]]
key = "Left"
mods = "Command"
chars = "\u001bOH"
mode = "AppCursor"

[[keyboard.bindings]]
key = "Right"
mods = "Command"
chars = "\u001bOF"
mode = "AppCursor"

# use command + backspace to delete the whole line
[[keyboard.bindings]]
key = "Back"
mods = "Command"
chars = "\u0015"

# use command + ' to print "
[[keyboard.bindings]]
key = "'"
mods = "Command"
chars = "\u001d\""

# 切记，下面这两个 keybindings 的配置，一定要跟随 tmux.conf 中的配置。
# 当 tmux.conf 配置如下之后：
# Split horiziontal and vertical splits, instead of % and ". We also open them
# in the same directory.  Because we use widescreens nowadays, opening a
# vertical split that takes half of the screen is not worth. For vertical we
# only open 100 lines width, for horizontal it's 20 columns.
# https://github.com/neovim/neovim/issues/21771
#bind-key v split-window -h -l 100 -c "#{?pane_path,#{s@^file.//@@:pane_path},#{pane_current_path}}"
#bind-key s split-window -v -l 30 -c "#{?pane_path,#{s@^file.//@@:pane_path},#{pane_current_path}}"
# 然后你在配置完下面两项配置之后，那么就会奏效。

# 在 macos 上使用 cmd + D 按键，水平切分两个 pane
[[keyboard.bindings]]
chars = "\u0006v"
key = "D"
mods = "Command"

# 在 macos 上使用 cmd + shift + D 按键，垂直切分两个 pane
[[keyboard.bindings]]
chars = "\u0006s"
key = "D"
mods = "Command|Shift"

# 配置 r reload 我的 tmux config
[[keyboard.bindings]]
chars = "\u0006R"
key = "R"
mods = "Command|Control"

# tmux 特别配置
# tmux menu
[[keyboard.bindings]]
chars = "\u0006A"
key = "A"
mods = "Command"

# project commands
[[keyboard.bindings]]
chars = "\u0006E"
key = "E"
mods = "Command"

# session
[[keyboard.bindings]]
chars = "\u0006O"
key = "O"
mods = "Command"

# Pane Related
[[keyboard.bindings]]
chars = "\u0006h"
key = "h"
mods = "Command"

# 新建一个 windows
[[keyboard.bindings]]
chars = "\u0006c"
key = "c"
mods = "Command"
# 在 macOS 上使用 cmd + 1-5 按键切换到相应的 tmux 窗口

[[keyboard.bindings]]
chars = "\u0006\u0031"
key = "Key1"
mods = "Command"

[[keyboard.bindings]]
chars = "\u0006\u0032"
key = "Key2"
mods = "Command"

[[keyboard.bindings]]
chars = "\u0006\u0033"
key = "Key3" 
mods = "Command"

[[keyboard.bindings]]
chars = "\u0006\u0034"
key = "Key4"
mods = "Command"

[[keyboard.bindings]]
chars = "\u0006\u0035"
key = "Key5"
mods = "Command"

# 使用 cmd + [ 和 cmd + ] 切换到上一个/下一个窗口

[[keyboard.bindings]]
chars = "\u0006p"
key = "LBracket"
mods = "Command"

[[keyboard.bindings]]
chars = "\u0006n"
key = "RBracket" 
mods = "Command"